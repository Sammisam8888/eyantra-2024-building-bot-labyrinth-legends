def sysCall_init():
    sim = require('sim')

    # do some initialization here
    #
    # Instead of using globals, you can do e.g.:
    # self.myVariable = 21000000

    ###### ADD YOUR CODE HERE ######
    # Hint: Initialize the scene objects which you will require
    #       Initialize algorithm related variables here
    ################################

def sysCall_actuation():
    # put your actuation code here
    # This function will be executed at each simulation time step

    ###### ADD YOUR CODE HERE ######
    # Hint: Use the error feedback and apply control algorithm here
    #       Provide the resulting actuation as input to the actuator joint

    # Example psuedo code:
    #   x1 = error_state_1; # Error in states w.r.t desired setpoint
    #   x2 = error_state_2;
    #   x3 = error_state_3;
    #   x4 = error_state_4;
    #   k = [gain_1 , gain_2, gain_3, gain_4];   # These gains will be generated by control algorithm. For ex: LQR, PID, etc.
    #   U = -k[1]*x1 +k[2]*x2 -k[3]*x3 +k[4]*x4;  # +/- Sign convention may differ according to implementation
    #   Set_joint_actuation(U);  # Provide this calculated input to system's actuator
    ################################

    pass

def sysCall_sensing():
    # put your sensing code here
    # This function will be executed at each simulation time step
